The assignment is to build a work-stealing scheduler, and a particular
application (quick-sort),
 in Java, Ada 2012, or some other language that
has support for creating multiple kernel/OS threads.

You are encouraged 
to work in a group of 3 to 4 students, since the assignment might take
from 30 to 40 hours of work in total.


The main routine of the program should take some parameters from the
command line, and time the application running with those parameters

(omitting time to build up the random array of values and print out the
original and sorted arrays). 
The proposed application is quick-sort. 

The
parameters will control the size of the array (which will also determine
how large will be the numbers used to randomly initialize the array),

the number of server threads, the size of a slice that will be sorted
sequentially, and any parameters that might affect the implementation 
of
the work-stealing queues, such as whether each queue is split into a
shared and an unshared part. 
On each run, the array will be copied and 
sorted twice, once completely sequentially, and once using the specified
 parameters, and a speed-up
will be reported along with the values of the
parameters. 

If all of this starts working, you could then start giving a
range of parameter values, and have tests run with different values for
the parameters
drawn from these ranges, reporting on the speed-up for
each set of parameter values.



If possible, report both "wall-clock" time and CPU time. In general, a 
parallel program will always take more total CPU time, but ideally will 
complete
in less wall-clock time.  

One goal is to find the parameters
that will minimize wall-clock time.  

You will want to do your timings on
a machine with very little else running, or the wall-clock time will not 
be as meaningful.



The work-stealing scheduler should be one class/package (or set of
classes/packaages). 
The application should be another class/package (or
classes/packages).  

It should be possible to write other applications
that use the same scheduler, such as a graph search, or an n-queens
solver,
though that is not part of this assignment.



Frameworks are already provided to you in Java and Ada 2012 (see the respective
attachment).  

You can use these as-is, or adapt them for other languages, 
or merely use them as a guide.


You will need either "javac"/"java" from some Java 8 SE distribution, or
"gnatmake"/"gcc" from some libre.adacore.com Ada 2012 distribution.

You
will need to use "gnatchop" on the Ada source code to break it up into
separate files, and you will need to rename the Java source file
"QuickSort.java" 
for "javac" to be willing to compile it.

